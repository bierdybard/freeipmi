ipmi-locate
-----------
(TEST) ensure no breakage on itanium, dell, sun machine for acpi/spmi

freeipmi tools
--------------
config via environment variables too - like config file
new ipmi-oem-config - to deal with config OEM stuff config tool style

libfreeipmi
-----------
* how to support xRC4 (can we? should we? does any vendor support this?)
* more detailed debug output for ssif interface like KCS interface
  - don't have a SSIF ipmi system, so shouldn't develop until I have a
    system I can test on?
buffer overflow corner case unsigned > signed
ipmi_kcs_write/read
ipmi_ssif_write/read
api/raw_api funcs
debug funcs
assemble funcs
hash/crypto funcs
fiid funcs
- counting up fields/lengths/etc. can be unsigned overflow too
lan send funcs

ipmi-fru
--------
(TEST) multirecord stuff against a FRU

bmc-config
----------
(TEST) that ipmi 2.0 (> 20 char) password not possible on ipmi 1.5 only mobo
copy ipmi-oem stuff in
- inventec mac/shared nic stuff
- into lan_conf?  or into new section?

sensors/monitoring
------------------
(TEST) make sure bridging still works w/ sensor-read lib
(TEST) make sure oem still outputs fine
option output via entity_id organization (i.e. groups of owners)

ipmi-chassis-config
-------------------
* conf.5 manpage
(NEVER TESTED) panel button config - need hardware w/ this

general
-------
beginning doc for developers
event handling
try and consolidate checks/etc code in ipmipower/ipmiconsole/api
-x option for excluding hosts??
firmware firewall support?
- new config tool??
read/store username/password/k_g out of file encrypted so it's not sitting there in the clear
configure alternate port - i.e. don't use port 623, use 722
have funcs that return buflen return ssize_t?, input should be size_t and void *? like read(), write()?

bmc-device
--------
(NEVER TESTED) get auxiliary log status - not tested, don't have a machine with this support
(TEST) ensure get-lan-statistics and clear-lan-statistics still work

ipmi-pef-config
-----------
* conf.5 manpage

inband code
-----------
retry/resend code?

ipmi-sensors-config
-------------------
* conf.5 manpage
* instructions for each section??

IPv6
----
- well, IPMI only supports IPv4, so I suppose there is no need for
this for now.  Just watch for it in the future.

ipmb
----
(NEVER TESTED) ipmi 2.0 bridging
(NEVER TESTED) openipmi ipmb

libs
----
merge all libs into one?  would aid debian packaging.
- make package layout simpler?
- make .so-naming consistent?
- merge all except libipmidetect?

contribs
--------
module for snmptrapd to parse ipmi traps
zenoss
- request from someone

oem-isms
--------
what OEM vendors can add
- bmc-info - device specific info
- ipmi-oem - any oemi-sms
- ipmi-dcmi - oem exception actions
- ipmi-fru/fru-parse - oem fru specifics
- ipmi-sel/sel-parse - oem sel specifics
- ipmi-sensors/ipmi-sensors-config/ipmimonitoring/sensor-read/libipmimonitoring - oem sensor specifics

DCMI functionality
------------------
http://www.intel.com/technology/product/DCMI/index.htm
- new FreeIPMI tool? or separate project? or contrib project?
  - probably a contrib project
- nothing special as a whole, mostly already IPMI 2.0 with a few new
additions.
- get dcmi capabilities info
  - the typical what is dcmi supported and version info junk
- get asset tag
  - seems useless.  gets asset tag, but the asset tag is already
    stored in the FRU (and output via normal FRU output in ipmi-fru.)
  - if supported, make ipmi-fru stuff into lib or steal code 
    from ipmi-fru for parsing.
- get dcmi sensor info command
  - seems useless, only gets the SDR #s of specific sensors
    DCMI cares about?  But sensors already should be output by
    ipmi-sensors/ipmimonitoring/etc.
- get power reading
- get power limit
- set power limit
- activate/deactive power limit
  - these 4 commands seem like the only maybe potentially useful
    additions.

ipmi proxy daemon
-----------------
capture lan and do inband, maybe useful if you have dedicated port
that can't be seen by the network, and you don't have enough switch
ports to have both plugged up to the network.

PmBus functionality
-------------------
pmbus.org
- doable via FreeIPMI?  Can pass through Smbus to PmBus to do power control monitoring?

RELEASE TODOS - Do on every release
-----------------------------------
Email freeipmi-users && freeipmi-devel
Email info-gnu@gnu.org
Update savannah announcements
Update freshmeat.net
Update freeipmi webpage
Update opendesktop.org page
Update ohloh page??
Update to softpedia??
Update fsf directory info.
Upload to ftp.zresearch.com
Upload to ftp.gnu.org

info-gnu@gnu.org template e-mail 

FreeIPMI X.X.X has been released. It can be downloaded at:

http://www.gnu.org/software/freeipmi/download.html

What is IPMI?

The Intelligent Platform Management Interface (IPMI) specification
defines a set of interfaces for platform management.  It is
implemented by a large number of hardware manufacturers to support
system management on motherboards. The features of IPMI that most
users will be interested in are sensor monitoring (i.e. CPU
temperatures, fan speeds), remote power control, and serial-over-LAN
(SOL).

What is FreeIPMI?

FreeIPMI provides in-band and out-of-band IPMI software based on the
IPMI v1.5/2.0 specification.  FreeIPMI provides tools and libraries
for users to access and read IPMI sensor readings, system event log
(SEL) entries, serial-over-LAN (SOL), remote power control functions,
field replaceable unit (FRU) device information, and more.  More
information about FreeIPMI can be found at the FreeIPMI webpage at:

http://www.gnu.org/software/freeipmi/index.html

Release X.X.X Changes
---------------------

To do this:

1. The file to be distributed (for example, foo.tar.gz).

2. Detached GPG binary signature for (1), (for example, foo.tar.gz.sig).

gpg -b foo.tar.gz

3. A clearsigned directive file, (for example, foo.tar.gz.directive.asc). 

Format is:

version: 1.1
directory: freeipmi
filename: freeipmi-0.X.X.tar.gz
comment: FreeIPMI 0.X.X

gpg --clearsign foo.tar.gz.directive

4. Upload the file(s) via anonymous ftp to ftp-upload.gnu.org. If the
upload is destined for ftp.gnu.org, place the file(s) in the
/incoming/ftp directory. If the upload is destined for alpha.gnu.org,
place the file(s) in the /incoming/alpha directory.

Uploads are processed every five minutes. Uploads that are in progress
while the upload processing script is running are handled properly, so
do not worry about the timing of your upload. Uploaded files that
belong to an incomplete triplet are deleted automatically after 24
hours.

Your designated upload email addresses (see Automated Upload
Registration) are sent a message if there are any problems processing
an upload for your package. You also receive a message when your
upload has been successfully processed.
